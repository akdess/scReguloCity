[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Akdes Serin Harmanci. Maintainer. Arif O. Harmanci. . Rachel Naomi Curry. .","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Curry RN, Harmanci AO, Harmanci (2022). scram: . R package version 0.1.0, https://akdess.github.io/scram/.","code":"@Manual{,   title = {scram: },   author = {Rachel Naomi Curry and Arif O. Harmanci and Akdes Serin Harmanci},   year = {2022},   note = {R package version 0.1.0},   url = {https://akdess.github.io/scram/}, }"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"","text":"SCRAM publicly available https://github.com/akdess/scram vignette shows basic steps running scram.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"","text":"Install latest version GitHub (requires devtools package):","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"akdess/scram\", dependencies = TRUE, build_vignettes = FALSE)"},{"path":"/index.html","id":"input-data","dir":"","previous_headings":"","what":"Input data","title":"","text":"input scram consists raw expression matrix. Optionally (preferably), user can also provide Seurat R object clusters cluster markers. Cluster markers can obtained running Seurat R package function FindAllMarkers. Example dataset run tutorial can downloaded []. example_seurat_object.rda : seurat object clustering information example_seurat_markers.rda : seurat cluster markers, missing can generated running following code Optionally, large scale CNV calls inferred R package [CaSpER] (https://github.com/akdess/CaSpER) can provided input. SCRAM uses matrix generated extractLargeScaleEvents R function CaSpER. SCRAM processes large scale CNV call matrix using following function: Glioma human mouse cell type markers manually curated scram package. Markers can loaded SCRAM package","code":"load(\"example_seurat_object.rda\") if(is.null(seuratObj$seurat_clusters)) meesage(\"seurat clusters are missing, please run FindClusters function in Seurat package\") combined.markers <- FindAllMarkers(seuratObj, only.pos = T, min.pct = 0.1, logfc.threshold = 0.5) combined.markers <- combined.markers[combined.markers$p_val_adj<0.05,] save(\"combined.markers\", file=\"example_seurat_markers.rda\") library(\"scram\") library(\"CaSpER\") load(\"example_seurat_object.rda\")  load(\"example_finalChrMat.rda\") cnv <- readCASPER(finalChrMat=finalChrMat, seurat_obj=seuratObj,    amp_chr=c(\"chr7q\",\"chr7p\"), del_chr=c(\"chr10p\",\"chr10q\", \"chr13q\"), min_threshold=0, plot=T, project=\"example\") save(\"cnv\", file=\"example_cnv.rda\") library(\"scram\") data (markers_human) data (markers_mouse)"},{"path":"/index.html","id":"running-scram","dir":"","previous_headings":"","what":"Running SCRAM","title":"","text":"main functions need run SCRAM analysis CreateSCRAMObject() runSCRAM(). SCRAM object required performing analysis single-cell RNA-Seq. SCRAM object created using following function like run SCRAM without cnv calls, can set cnv=NULL creating casper object run frequent geneset analysis different levels gene level, cell type level etc. SCRAM outputs co-occuring genesets celltypes, cell lineages etc excel file using function:","code":"load(\"example_seurat_object.rda\")  load(\"example_seurat_markers.rda\") load(\"example_cnv.rda\") data (markers_human)  scram_obj <- CreateSCRAMObject(seurat_obj=seuratObj,      expr_data = seuratObj@assays$RNA@data,     cluster_markers=combined.markers,      required_markers=markers_human$required_markers,      supporting_markers=markers_human$supporting_markers,      rules=markers_human$rules,     cell_type_markers=markers_human$cell_type_markers,      cnv=cnv,      organism=\"human\") load(\"example_seurat_object.rda\") load(\"example_seurat_markers.rda\") data (markers_human)  scram_obj <- CreateSCRAMObject(seurat_obj=seuratObj,      expr_data = seuratObj@assays$RNA@data,     cluster_markers=combined.markers,      required_markers=markers_human$required_markers,      supporting_markers=markers_human$supporting_markers,      rules=markers_human$rules,     cell_type_markers=markers_human$cell_type_markers,      cnv=NULL,      organism=\"human\") scram_obj <- runSCRAM(object=scram_obj) writeSCRAMresults(object=scram_obj, project=\"example\")"},{"path":"/index.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"","text":"order comprehensively visualize co-occuring genesets celltypes, cell lineages etc, SCRAM generates plots using functions:","code":"plotUMAPDirksCellClass(object=scram_obj, project=\"example\") plotUMAPSuvaCellClass(object=scram_obj, project=\"example\") plotUMAPCellClassSimple(object=scram_obj, project=\"example\") plotUMAPCellLineage(object=scram_obj, project=\"example\") plotUMAPCellTypePerCluster(object=scram_obj, project=\"example\") plotPercAnnotatedCells (object=scram_obj, project=\"example\") plotUMAPSuvaCellClass (object=scram_obj, project=\"example\")"},{"path":"/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"","text":"scATACSeq human IDH-WT sample R code scATACSeq humanIDH-Mutant sample R code scRNASeq human IDH-WT sample R code scRNASeq human IDH-Mutant sample R code 10x human spatial transcriptomics dataset R code scRNASeq mouse IDH-WT sample R code scRNASeq mouse IDH-Mutant sample R code","code":""},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""}]
